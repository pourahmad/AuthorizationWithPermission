// <auto-generated />
using System;
using AuthorizationWithPermission.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AuthorizationWithPermission.API.Migrations
{
    [DbContext(typeof(AuthDbContext))]
    partial class AuthDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.2");

            modelBuilder.Entity("AuthorizationWithPermission.API.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4ac4eae3-6071-47e6-be10-e8d634b53dd1"),
                            CreatedDate = new DateTime(2024, 2, 23, 14, 18, 12, 131, DateTimeKind.Local).AddTicks(8197)
                        },
                        new
                        {
                            Id = new Guid("9c98ebd2-216b-44a8-b00c-c04d0f535355"),
                            CreatedDate = new DateTime(2024, 2, 23, 14, 18, 12, 131, DateTimeKind.Local).AddTicks(8201)
                        },
                        new
                        {
                            Id = new Guid("00216c68-2681-459c-8905-5e5ef28ae7b8"),
                            CreatedDate = new DateTime(2024, 2, 23, 14, 18, 12, 131, DateTimeKind.Local).AddTicks(8203)
                        });
                });

            modelBuilder.Entity("AuthorizationWithPermission.API.Entities.OrderProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("orderProducts");
                });

            modelBuilder.Entity("AuthorizationWithPermission.API.Entities.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Code")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActived")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6c225e19-03f2-4503-b028-dc0fbab12554"),
                            Code = 1000,
                            IsActived = true,
                            Name = "GetAllOredrList",
                            Title = "دریافت لیست کلیه سفارشات",
                            Type = "Get"
                        },
                        new
                        {
                            Id = new Guid("65897002-d154-4a10-83f5-7ae4e678939f"),
                            Code = 1010,
                            IsActived = true,
                            Name = "GetOrderById",
                            Title = "دریافت سفارش با شناسه",
                            Type = "Get"
                        },
                        new
                        {
                            Id = new Guid("c3cfd514-6e7c-42b7-a9e9-fc299e4452cd"),
                            Code = 1020,
                            IsActived = true,
                            Name = "AddOrder",
                            Title = "ایجاد سفارش جدید",
                            Type = "Post"
                        },
                        new
                        {
                            Id = new Guid("c680fc9b-47b1-4796-9829-ddec56cb463e"),
                            Code = 1030,
                            IsActived = true,
                            Name = "UpdateOrder",
                            Title = "ویرایش سفارش موجود",
                            Type = "Put"
                        },
                        new
                        {
                            Id = new Guid("bc13ed90-62ac-4ba9-8971-e359c5398677"),
                            Code = 1040,
                            IsActived = true,
                            Name = "DeleteOrderById",
                            Title = "حذف سفارش موجود",
                            Type = "Delete"
                        },
                        new
                        {
                            Id = new Guid("7a06c30e-cc6a-49cd-87c5-36cf23325fda"),
                            Code = 1060,
                            IsActived = true,
                            Name = "GetAllProductList",
                            Title = "دریافت لیست کلیه محصولات",
                            Type = "Get"
                        },
                        new
                        {
                            Id = new Guid("000e89f9-2fbb-43da-b10e-4f6545f61f21"),
                            Code = 1070,
                            IsActived = true,
                            Name = "GetProductById",
                            Title = "دریافت محصول با شناسه",
                            Type = "Get"
                        },
                        new
                        {
                            Id = new Guid("7fbd9add-7cc6-4b9b-8f8c-c8c12a2cd725"),
                            Code = 1080,
                            IsActived = true,
                            Name = "AddProduct",
                            Title = "ایجاد محصول جدید",
                            Type = "Post"
                        },
                        new
                        {
                            Id = new Guid("c594de79-8bbd-417b-911d-c78d8105845d"),
                            Code = 1090,
                            IsActived = true,
                            Name = "UpdateProduct",
                            Title = "ویرایش محصول موجود",
                            Type = "Put"
                        },
                        new
                        {
                            Id = new Guid("0c187719-26b0-47da-9171-4caff3d6d881"),
                            Code = 1050,
                            IsActived = true,
                            Name = "DeleteProductById",
                            Title = "حذف محصول موجود",
                            Type = "Delete"
                        });
                });

            modelBuilder.Entity("AuthorizationWithPermission.API.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9468e23c-ac06-4431-813f-65cff45f9184"),
                            Name = "مانیتور سامسونگ مدل LS19A330NH-M سایز 19 اینچ"
                        },
                        new
                        {
                            Id = new Guid("651e108b-1dc1-4e4b-b9c8-2f82b7846b86"),
                            Name = "مچ بند هوشمند شیائومی مدل Mi Band 8 گلوبال"
                        },
                        new
                        {
                            Id = new Guid("01379c5e-b8b7-4676-ad5d-4aba507c5111"),
                            Name = "ساعت هوشمند گارمین مدل MARQ ADVENTURER Leather Band"
                        },
                        new
                        {
                            Id = new Guid("60856657-bbd9-4afb-95b1-c5d91418e8e8"),
                            Name = "ساعت هوشمند موبووی مدل TicWatch Pro 5 Elite Edition Leather Version"
                        },
                        new
                        {
                            Id = new Guid("bcacedfc-6a84-4b12-b5c0-74fdead0fbcf"),
                            Name = "گوشی موبایل تی سی ال مدل 40 SE دو سیم کارت ظرفیت 256 گیگابایت و رم 6 گیگابایت"
                        },
                        new
                        {
                            Id = new Guid("e25c6d6a-9887-4b7f-a729-e7af0b0838c4"),
                            Name = "گوشی موبایل تی سی ال مدل 40R 5G دو سیم کارت ظرفیت 128 گیگابایت و رم 4 گیگابایت"
                        });
                });

            modelBuilder.Entity("AuthorizationWithPermission.API.Entities.UserPermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPermissions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8b5f771c-fead-46bc-88fa-09e1b211cf58",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "452f6316-2e6b-49dd-829a-7b26b1bcf05a",
                            Email = "nasserpourahmad@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "NASSERPOURAHMAD@GMAIL.COM",
                            NormalizedUserName = "NASSER",
                            PasswordHash = "AQAAAAIAAYagAAAAEF7HZw5oPsykCzGQyb6d5QGPZBvZegKuJ/uMdsaYgVHXyig75PXNH7dBvlkDGJFAhw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7a1ac63e-930d-44d8-a7e1-e53bcd795c94",
                            TwoFactorEnabled = false,
                            UserName = "nasser"
                        },
                        new
                        {
                            Id = "802a0ac9-7da0-496f-9308-38e2a1290d64",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a1aa3063-a6fc-4fe1-9230-9fd77c2d6a6b",
                            Email = "pourahmad@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "POURAHMAD@GMAIL.COM",
                            NormalizedUserName = "POURAHMAD",
                            PasswordHash = "AQAAAAIAAYagAAAAEEOTOX2laswLL53n6GHRSXCeLKoNGjrz+bJzlkVIcbqt1Sy+LPhMZurX3TUFftWKbA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9a4e0ff5-d9d1-473d-b910-a05ceeaf8f2c",
                            TwoFactorEnabled = false,
                            UserName = "pourahmad"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AuthorizationWithPermission.API.Entities.OrderProduct", b =>
                {
                    b.HasOne("AuthorizationWithPermission.API.Entities.Order", "Order")
                        .WithMany("orderProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuthorizationWithPermission.API.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("AuthorizationWithPermission.API.Entities.UserPermission", b =>
                {
                    b.HasOne("AuthorizationWithPermission.API.Entities.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Permission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AuthorizationWithPermission.API.Entities.Order", b =>
                {
                    b.Navigation("orderProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
